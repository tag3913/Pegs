(load "help.l")

;simulate the play of the game
(defmethod play (&aux play avail move)
   (setf play ())
   (setf avail '(nw n ne w c e sw s se))
   (dolist (player '(x o x o x o x o x))
      (cond
         ((eq player 'x)
            (setf move (select avail))
            (setf avail (remove move avail))
            (setf play (snoc move play))
         )
         ((eq player 'o)
            (setf move (select avail))
            (setf avail (remove move avail))
            (setf play (snoc move play))
         )
      )
   )
   play
)

(setf positions '(NW N NE W C E SW S SE))

(defmethod stats ((n number) (demo t) &aux w l d p result)
   (if demo (format t "Begin Gathering Statistics ...~%"))
   (setf w 0 l 0 d 0)
   (dotimes ( i n )
      (setf p (play))
      (if demo (format t "~A~%" p))
      (if demo (visualize p))
      (setf result (analyze p))
      (if demo (format t "~A~%" result))
      (cond
         ((eq result 'w) (setf w (+ w 1)))
         ((eq result 'l) (setf l (+ l 1)))
         ((eq result 'd) (setf d (+ d 1)))
      )
   )
   (setf results (mapcar #'probability (list w l d) (list n n n)))
   (if demo (format t "End Gathering Statistics~%"))
   (mapcar #'list '(w l d) results)
)
 
(defmethod probability ((special integer) (total integer))
   (/ (float special) (float total))
)

(defmethod demo (&aux p)
   (setf p (play))
   (format t "~A~%" p)
   (visualize p)
   (format t "~A~%" (analyze p))
   nil
)

(defmethod visualize ((play list) )
   (dotimes (i 9)
      (cond 
         ((find (nth i positions) play)
            (cond
               ((even (position (nth i positions) play))
                  (format t "X ")
               )
               (t
                  (format t "O ") 
               )
            )
         )
         (t
            (format t "-- ")
         )
      )
      (if (or (= 2 i) (= 5 i))
         (terpri)
      )   
   )   
)

(defmethod analyze ((play list) &aux True-result  Xresult Oresult Xlist Olist Xwin Owin)
   (setf True-result 'D)
   (setf Xresult 'D)
   (setf Oresult 'D)
   (setf Xlist '())
   (setf Olist '())
   (setf wins '((NW N NE) (W C E) (SW S SE) (NW W SW) (N C S) (NE E SE) (NW C SE) (NE C SW)))
   (dotimes (i 9)
      (cond
         ((even i)
            (setf Xlist (snoc (nth i play) Xlist))
         )
         (t
            (setf Olist (snoc (nth i play) Olist))
         )
      )
   )
   (dotimes (i 8)
      (if (sublist Xlist (nth i wins))
         (progn
            (setf Xresult 'W)
            (setf Xwin (nth i wins))
         )
      )
      (if (sublist Olist (nth i wins))
         (progn
            (setf Oresult 'W)
            (setf Owin (nth i wins))
         )
      )

   )
   (if (equal Xresult 'W)
      (setf True-result Xresult)
   )
   (if (equal Oresult 'W)
      (setf True-result 'L)
   )
   (if (and (equal Xresult 'W) (equal Oresult 'W))
      (progn
         (if (< (farthest play Xwin) (farthest play Owin))
            (setf True-result 'W)
            (setf True-result 'L)
         )
      )
   )
   True-result
)
